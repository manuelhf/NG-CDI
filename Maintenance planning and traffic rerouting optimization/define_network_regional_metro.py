#import os
#import json
#from math import *
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
import collections

def set_node_community(G, communities):
    for c, v_c in enumerate(communities):
        for v in v_c:
            # Add 1 to save 0 for external edges
            G.nodes[v]['community'] = c + 1

def get_color(i, r_off=1, g_off=1, b_off=1):
    '''Assign a color to a vertex.'''
    r0, g0, b0 = 0, 0, 0
    n = 16
    low, high = 0.1, 0.9
    span = high - low
    r = low + span * (((i + r_off) * 3) % n) / (n - 1)
    g = low + span * (((i + g_off) * 5) % n) / (n - 1)
    b = low + span * (((i + b_off) * 7) % n) / (n - 1)
    return (r, g, b) 


def relabel_nodes(G, mapping, copy=True):
    if not hasattr(mapping, "__getitem__"):
        m = {n: mapping(n) for n in G} 
    else:
        m = mapping
    if copy:
        return _relabel_copy(G, m)
    else:
        return _relabel_inplace(G, m)

clique_size = 3

G = nx.read_gml('graph_anonymous.gml')

### Note there are disconnected subgraphs. Let's take the largest connected graph.
G2 = G.to_undirected()

def connected_component_subgraphs(G):
    for c in nx.connected_components(G):
        yield G.subgraph(c)

Gc = max(connected_component_subgraphs(G2), key=len)
#pos = nx.spring_layout(Gc) # layout by default that it is saved for future use

#plt.figure(figsize=(12, 8))
#plt.axis('off')
#nx.draw_networkx(Gc, node_size=50, node_color='black', edge_color='gray', with_labels=False)
###############################################################################


node_names = list(Gc.nodes)
link_names = list(Gc.edges)

subs = 'core-aln1.'


node_names1 = [i for i in node_names if subs in i]

G = Gc.subgraph(node_names1)

#pos = nx.spring_layout(G) # layout by default that it is saved for future use

# Fixing node classifications since 'core-aln1.tan-chachalaca' should be 'regional'
# maximum time series of maximun traffic
# # G.degree('core-aln1.whimsical-angelfish') = 4
#Question2:
G.nodes['core-aln1.tan-chachalaca']['nodeType'] = 'regional'
G.nodes['core-aln1.whimsical-angelfish']['nodeType'] = 'metro'

communities=(['core-aln1.apricot-llama', 'core-aln1.athletic-galago', 'core-aln1.busy-marten', 'core-aln1.chocolate-capuchin', 'core-aln1.curvy-gopher', 'core-aln1.dexterous-kestrel', 'core-aln1.fascinating-groundhog', 'core-aln1.jasmine-limpet', 'core-aln1.pistachio-partridge', 'core-aln1.platinum-dogfish', 'core-aln1.prehistoric-yak', 'core-aln1.rugged-kangaroo', 'core-aln1.whimsical-angelfish'],
['core-aln1.ivory-dragon', 'core-aln1.kind-quokka', 'core-aln1.magnificent-petrel', 'core-aln1.maize-parrot', 'core-aln1.resourceful-pillbug', 'core-aln1.rose-macaque', 'core-aln1.silent-skink', 'core-aln1.skinny-herring', 'core-aln1.stalwart-grouse', 'core-aln1.tall-frog', 'core-aln1.uptight-mastodon'], 
['core-aln1.annoying-dogfish', 'core-aln1.dark-kittiwake', 'core-aln1.electric-mosquito', 'core-aln1.fat-marten', 'core-aln1.icy-earwig', 'core-aln1.real-angora', 'core-aln1.slick-reindeer', 'core-aln1.tan-chachalaca', 'core-aln1.teal-nuthatch', 'core-aln1.true-snake', 'core-aln1.valiant-python', 'core-aln1.witty-gopher'],
['core-aln1.apricot-capybara', 'core-aln1.burrowing-coati', 'core-aln1.congenial-python', 'core-aln1.hissing-raptor', 'core-aln1.nifty-puma', 'core-aln1.portable-beagle', 'core-aln1.versatile-ringtail'], 
['core-aln1.acoustic-buffalo', 'core-aln1.amaranth-lyrebird', 'core-aln1.chestnut-koala', 'core-aln1.ethereal-ibex', 'core-aln1.illustrious-silkworm', 'core-aln1.pistachio-cheetah', 'core-aln1.weightless-silkworm'], 
['core-aln1.aspiring-poodle', 'core-aln1.coral-chameleon', 'core-aln1.heavy-condor', 'core-aln1.magnetic-beagle', 'core-aln1.monumental-skua', 'core-aln1.placid-elk', 'core-aln1.polar-gharial', 'core-aln1.prudent-husky', 'core-aln1.sensible-cuttlefish', 'core-aln1.true-prawn', 'core-aln1.unyielding-gerbil'], 
['core-aln1.aloof-capuchin', 'core-aln1.cunning-puma', 'core-aln1.fancy-petrel', 'core-aln1.glittering-peccary', 'core-aln1.infrared-zebu', 'core-aln1.knowing-slug', 'core-aln1.outrageous-mosquito', 'core-aln1.slim-centipede', 'core-aln1.tentacled-mouse'], 
['core-aln1.abstract-donkey', 'core-aln1.aromatic-anaconda', 'core-aln1.cerise-prawn', 'core-aln1.crafty-cat', 'core-aln1.enthusiastic-jackdaw', 'core-aln1.independent-scorpion', 'core-aln1.magic-mongrel', 'core-aln1.opal-jellyfish', 'core-aln1.silky-pudu', 'core-aln1.snobbish-oyster', 'core-aln1.swinging-alpaca'],
['core-aln1.cooperative-ibex', 'core-aln1.curly-wrasse', 'core-aln1.jovial-quetzal', 'core-aln1.little-raven', 'core-aln1.magic-ferret', 'core-aln1.marigold-curassow', 'core-aln1.married-bobcat', 'core-aln1.mustard-rhino', 'core-aln1.singing-binturong', 'core-aln1.smart-ladybug', 'core-aln1.sophisticated-barracuda'])

set_node_community(G, communities)

mapping={'core-aln1.slim-centipede': 0, 'core-aln1.apricot-llama': 1, 'core-aln1.jovial-quetzal': 2, 'core-aln1.fat-marten': 3, 'core-aln1.ethereal-ibex': 4, 'core-aln1.hissing-raptor': 5, 'core-aln1.weightless-silkworm': 6, 'core-aln1.magic-ferret': 7, 'core-aln1.kind-quokka': 8, 'core-aln1.polar-gharial': 9, 'core-aln1.swinging-alpaca': 10, 'core-aln1.smooth-raven': 11, 'core-aln1.versed-bug': 12, 'core-aln1.nifty-puma': 13, 'core-aln1.annoying-dogfish': 14, 'core-aln1.real-angora': 15, 'core-aln1.brilliant-badger': 16, 'core-aln1.electric-mosquito': 17, 'core-aln1.opal-jellyfish': 18, 'core-aln1.little-raven': 19, 'core-aln1.independent-scorpion': 20, 'core-aln1.witty-gopher': 21, 'core-aln1.coral-chameleon': 22, 'core-aln1.apricot-capybara': 23, 'core-aln1.cunning-puma': 24, 'core-aln1.platinum-dogfish': 25, 'core-aln1.jasmine-limpet': 26, 'core-aln1.uptight-mastodon': 27, 'core-aln1.celadon-aardwolf': 28, 'core-aln1.tentacled-mouse': 29, 'core-aln1.ivory-dragon': 30, 'core-aln1.maize-parrot': 31, 'core-aln1.stalwart-grouse': 32, 'core-aln1.knowing-slug': 33, 'core-aln1.heavy-condor': 34, 'core-aln1.silky-pudu': 35, 'core-aln1.outrageous-mosquito': 36, 'core-aln1.brass-nuthatch': 37, 'core-aln1.married-bobcat': 38, 'core-aln1.chestnut-koala': 39, 'core-aln1.monumental-skua': 40, 'core-aln1.skinny-herring': 41, 'core-aln1.abstract-donkey': 42, 'core-aln1.marigold-curassow': 43, 'core-aln1.dexterous-kestrel': 44, 'core-aln1.valiant-python': 45, 'core-aln1.congenial-python': 46, 'core-aln1.unyielding-gerbil': 47, 'core-aln1.illustrious-silkworm': 48, 'core-aln1.true-snake': 49, 'core-aln1.singing-binturong': 50, 'core-aln1.silent-skink': 51, 'core-aln1.snobbish-oyster': 52, 'core-aln1.malachite-pheasant': 53, 'core-aln1.misty-hog': 54, 'core-aln1.demonic-donkey': 55, 'core-aln1.glittering-peccary': 56, 'core-aln1.athletic-galago': 57, 'core-aln1.burrowing-coati': 58, 'core-aln1.crafty-cat': 59, 'core-aln1.resourceful-pillbug': 60, 'core-aln1.prudent-husky': 61, 'core-aln1.pistachio-partridge': 62, 'core-aln1.infrared-zebu': 63, 'core-aln1.magnificent-petrel': 64, 'core-aln1.mustard-rhino': 65, 'core-aln1.smart-ladybug': 66, 'core-aln1.magic-mongrel': 67, 'core-aln1.aromatic-anaconda': 68, 'core-aln1.prehistoric-yak': 69, 'core-aln1.cerise-prawn': 70, 'core-aln1.rose-macaque': 71, 'core-aln1.pistachio-cheetah': 72, 'core-aln1.versatile-ringtail': 73, 'core-aln1.curvy-gopher': 74, 'core-aln1.rugged-kangaroo': 75, 'core-aln1.curly-wrasse': 76, 'core-aln1.sensible-cuttlefish': 77, 'core-aln1.cooperative-ibex': 78, 'core-aln1.magnetic-beagle': 79, 'core-aln1.whimsical-angelfish': 80, 'core-aln1.tall-frog': 81, 'core-aln1.diamond-gopher': 82, 'core-aln1.fascinating-groundhog': 83, 'core-aln1.amaranth-lyrebird': 84, 'core-aln1.dark-kittiwake': 85, 'core-aln1.teal-nuthatch': 86, 'core-aln1.fancy-petrel': 87, 'core-aln1.enthusiastic-jackdaw': 88, 'core-aln1.placid-elk': 89, 'core-aln1.tan-chachalaca': 90, 'core-aln1.icy-earwig': 91, 'core-aln1.acoustic-buffalo': 92, 'core-aln1.slick-reindeer': 93, 'core-aln1.aloof-capuchin': 94, 'core-aln1.sophisticated-barracuda': 95, 'core-aln1.pistachio-harrier': 96, 'core-aln1.chocolate-capuchin': 97, 'core-aln1.true-prawn': 98, 'core-aln1.busy-marten': 99, 'core-aln1.aspiring-poodle': 100, 'core-aln1.portable-beagle': 101}
G = nx.relabel_nodes(G, mapping)

#NETWORK VISUALISATION


#FIGURE
#f = plt.figure(figsize=(12, 8))
#plt.axis('off')
##nx.draw_networkx(G, node_size = 50, node_color = color_map_n, edge_color = 'gray', with_labels = False)
#f.savefig("BT_backbone.pdf", bbox_inches='tight')

#to get the CATEGORIES which are embedded as the network node attribute 'nodeType'
nodes_super = [x for x,y in G.nodes(data=True) if y['nodeType']=='super']
nodes_regional = [x for x,y in G.nodes(data=True) if y['nodeType']=='regional']
nodes_metro = [x for x,y in G.nodes(data=True) if y['nodeType']=='metro']
nodes_super_regional=[x for x,y in G.nodes(data=True) if y['nodeType']=='super' or y['nodeType']=='regional']
nodes_metro_regional=[x for x,y in G.nodes(data=True) if y['nodeType']=='metro' or y['nodeType']=='regional']
nodes_metro_super=[x for x,y in G.nodes(data=True) if y['nodeType']=='metro' or y['nodeType']=='super']

# VISUALISE Network of super and regional nodes - to be used as a first simple case study
#FIGURE
f1 = plt.figure(figsize=(12, 8))
plt.axis('off')
G2=G.subgraph(nodes_metro_regional)







Network2 = G2
remove = [node for node,degree in dict(Network2.degree()).items() if degree == 0]
G1 = Network2.copy()
G1.remove_nodes_from(remove)
#print(len(G1.nodes))

#print(remove)
labels = {}    
        
values=list(range(0, 92))
mapping2 = dict(zip(sorted(G1.nodes()), values))
mapping3={0:0, 29:9, 25:10, 85:11, 78:12, 55:13,  48:14 ,32:15, 21:16, 38:1,2:17, 33:18, 58:19, 68:20, 45:21, 86:22, 70:23, 57:24, 16:25, 7:26, 28:2, 26:27, 27:28, 52:29, 63:30, 73:31, 56:32, 46:33, 36:34, 24:35, 8:36, 69:3, 71:37, 90:38, 80:39, 42:40, 30:41, 88:42, 53:43, 35:44, 9:45, 19:46, 64:4, 43:47, 83:48, 4:49, 6:50, 34:51, 75:52, 41:5, 20:53, 91:54, 11:55, 65:56, 50:57, 5:58, 81:6, 76:59, 18:60, 84:61, 3:62, 44:63, 82:64, 14:65, 77:66, 40:67, 13:68, 12:69, 66:7, 89:70, 23:71, 54:72, 72:73, 1:74, 61:75, 67:76, 39:77, 87:78, 74:79, 22:80, 49:81, 10:8, 79:82, 62:83, 15:84, 17:85, 60:86, 37:87, 31:88, 51:89, 59:90, 47:91}
value_list=map(mapping3.get, values)
mapping4=dict(zip(sorted(G1.nodes()),value_list))
G1 = nx.relabel_nodes(G1, mapping4)

#global node_color
node_color2 = [get_color(G1.nodes[v]['community']) for v in G1.nodes]


color_map_n=[]
for i in G1.nodes():
    #print(G.nodes[i])
    if G1.nodes[i]['nodeType'] == 'super':
        color_map_n.append('red')
    elif G1.nodes[i]['nodeType'] == 'regional':
        color_map_n.append('orange')
    elif G1.nodes[i]['nodeType'] == 'metro':
        color_map_n.append('green')
    else: color_map_n.append('blue')

global node_pos
node_pos1=nx.spring_layout(G1)
#node_pos={ 32: (0.1941883634852104, 0.04786313285751162), 8: (0.3998175137958133, 0.012081211120355888), 27: (0.39835862304683634, 0.03619955033185555), 41: (0.39544616488301365, 0.06018580130991368), 51: (0.3910907665483387, 0.08395244082593956), 64: (0.3853083204190064, 0.1074127469897513), 81: (0.3781199260138559, 0.1304811156883484), 48: (0.36955181300451445, 0.15307337294603662), 71: (0.35963524550617004, 0.17510708206613693), 3243: (0.14970214963422018, 0.1326245316481591), 30: (0.29940429926844025, 0.2652490632963183), 31: (0.44910644890266016, 0.3978735949444777), 60: (0.59880859853688, 0.5304981265926373), 43: (0.07092097740850706, 0.187003248537083), 7: (0.21572801379967946, 0.3368403539691249), 19: (0.19197499118391428, 0.3509210776797769), 65: (0.1673071203102258, 0.3633295026467018), 78: (0.14184195481701395, 0.3740064970741661), 95: (0.11570084781462671, 0.3829011802214464), 50: (0.08900837358252539, 0.38997116487272954), 76: (0.06189173391611209, 0.39518275933149866), 431000: (-0.02410733605106469, 0.1985417748196108), 2: (-0.04821467210212938, 0.3970835496392216), 38: (-0.07232200815319408, 0.5956253244588324), 66: (-0.09642934420425876, 0.7941670992784432), 0: (-0.11361294934623123, 0.16459677317873123), 24: (-0.1567866439440302, 0.3679917774635296), 36: (-0.1858892688175076, 0.3541824102612839), 56: (-0.2137863304511207, 0.33807603421751775), 63: (-0.24029690569519177, 0.31977710536140036), 87: (-0.26524906329631825, 0.29940429926844025), 94: (-0.28848097893752594, 0.27708974140383963), 100010: (-0.17709120513064203, 0.09294463440875365), 29: (-0.35418241026128405, 0.1858892688175073), 15: (-0.5312736153919261, 0.278833903226261), 10: (-0.2, -6.66133814775094e-17), 67: (-0.3908067860007269, 0.08526462347176632), 59: (-0.3948201050551652, 0.06416451234310397), 35: (-0.3976950555389712, 0.042879398314979), 42: (-0.3994233482256568, 0.02147065188124851), 68: (-0.4, -1.2767564783189302e-16), 20: (-0.3994233482256567, -0.021470651881248762), 18: (-0.39769505553897117, -0.04287939831497925), 70: (-0.3948201050551652, -0.0641645123431042), 52: (-0.5922301575827478, -0.09624676851465633), 33: (-0.7896402101103304, -0.1283290246862084), 88: (-0.3908067860007268, -0.08526462347176657), 74: (-0.17709120513064197, -0.09294463440875377), 97: (-0.38530832041900653, -0.10741274698975084), 44: (-0.3781199260138561, -0.13048111568834786), 75: (-0.3695518130045147, -0.15307337294603604), 69: (-0.3596352455061704, -0.17510708206613632), 1: (-0.3484064079982062, -0.1965018444335511), 80: (-0.3359062732909591, -0.21717959288059158), 57: (-0.5038594099364387, -0.3257693893208874), 62: (-0.32218045302037834, -0.23706487654560682), 25: (-0.48327067953056757, -0.3555973148184102), 26: (-0.3072790312161122, -0.2560851361849953), 90: (-0.11361294934623112, -0.16459677317873134), 45: (-0.2929074666391093, -0.272406343514719), 86: (-0.2794045460995747, -0.28623958429764856), 17: (-0.265249063296318, -0.29940429926844053), 91: (-0.2504740790153254, -0.3118697416252891), 49: (-0.23511410091698914, -0.3236067977499791), 3: (-0.21920500294186787, -0.3345880552040908), 93: (-0.20278394152543605, -0.3447878667520198), 14: (-0.3041759122881541, -0.5171818001280297), 21: (-0.1858892688175073, -0.35418241026128405), 99: (-0.16856044310901155, -0.3627497443402183), 83: (-0.25284066466351746, -0.5441246165103274), 85: (-0.1508379366753281, -0.37046985958311063), 46: (-0.02410733605106456, -0.1985417748196108), 5: (-0.12360679774997883, -0.3804226065180615), 58: (-0.08631367870712228, -0.39057643153170885), 73: (-0.04821467210212903, -0.39708354963922166), 13: (-0.009665498094452702, -0.3998832056320772), 101: (0.028973920064705186, -0.39894925987659646), 4672: (0.07092097740850718, -0.18700324853708294), 23: (0.14184195481701437, -0.3740064970741659), 84: (0.21276293222552156, -0.5610097456112489), 72: (0.14970214963422024, -0.13262453164815904), 39: (0.24668754905141724, -0.3148733922436201), 6: (0.282842712474619, -0.28284271247461906), 4: (0.31487339224362004, -0.2466875490514173), 92: (0.34231250892057896, -0.20693512567106281), 77: (0.1941883634852104, -0.04786313285751154), 22: (0.3585707749182816, -0.1772766182396964), 9: (0.36671687812663306, -0.15974583342627804), 40: (0.37400649707416606, -0.141841954817014), 61: (0.3804226065180616, -0.12360679774997868), 98: (0.3859502213374207, -0.10508295127943441), 34: (0.39057643153170896, -0.08631367870712205), 47: (0.3942904323726604, -0.06734281653881495), 89: (0.3970835496392217, -0.0482146721021287), 100: (0.3989492598765965, -0.028973920064704367), 79: (0.39988320563207724, -0.00966549809445228)}
node_pos={ 32: (0.19318516525781368, 0.05176380902050412), 8: (0.39972028191535947, 0.014956477710530004), 27: (0.3974848839572971, 0.04478579044132284), 41: (0.39302658929331535, 0.07436464286516546), 51: (0.3863703305156274, 0.10352761804100791), 64: (0.37755333212334724, 0.13211162478206637), 81: (0.3666249023479907, 0.1599568097278959), 71: (0.3536461574018442, 0.18690745130922426), 30: (0.2828427124746193, 0.28284271247461884), 31: (0.42426406871192907, 0.42426406871192807), 60: (0.565685424949239, 0.5656854249492371), 43: (0.05176380902050426, 0.19318516525781365), 7: (0.18690745130922515, 0.35364615740184374), 19: (0.15995680972789672, 0.3666249023479904), 65: (0.13211162478206714, 0.37755333212334696), 78: (0.10352761804100859, 0.38637033051562725), 95: (0.0743646428651661, 0.3930265892933153), 50: (0.044785790441323386, 0.39748488395729703), 76: (0.014956477710530462, 0.3997202819153594), 2: (-0.10352761804100803, 0.3863703305156274), 38: (-0.15529142706151206, 0.5795554957734411), 66: (-0.20705523608201606, 0.7727406610312548), 0: (-0.14142135623730942, 0.14142135623730961), 24: (-0.21122714026014694, 0.33968087261063173), 36: (-0.23299107874712066, 0.32513867383664624), 56: (-0.253757313665458, 0.309204181345095), 63: (-0.27343692080914833, 0.29194562907913446), 87: (-0.2919456290791341, 0.2734369208091487), 94: (-0.30920418134509464, 0.25375731366545845), 29: (-0.32513867383664596, 0.23299107874712105), 33: (-0.33968087261063146, 0.21122714026014738), 10: (-0.19318516525781362, 0.05176380902050431), 67: (-0.35208055647204434, 0.18984014789905643), 59: (-0.36252311481465993, 0.16904730469628004), 35: (-0.3717390096907289, 0.14768245892507403), 42: (-0.3796970574292135, 0.12581790246064573), 68: (-0.38637033051562725, 0.10352761804100857), 20: (-0.3917362487062206, 0.08088702893281545), 18: (-0.39577665543237783, 0.05797274372289897), 70: (-0.3984778792366982, 0.03486229709906354), 52: (-0.5977168188550473, 0.052293445648595324), 88: (-0.39983078003288025, 0.011633887497244842), 74: (-0.1931851652578137, -0.05176380902050398), 97: (-0.3997858349905463, -0.013087633128710122), 44: (-0.39807389066887877, -0.03920685613182391), 75: (-0.3946573328339517, -0.06515818935783517), 69: (-0.38955079171093354, -0.09083050521374894), 1: (-0.3827761342928837, -0.1161138709017846), 80: (-0.37436237070293044, -0.14090001916849307), 57: (-0.5615435560543958, -0.2113500287527396), 62: (-0.3643455299684705, -0.16508281192175756), 25: (-0.5465182949527059, -0.24762421788263633), 26: (-0.3527685057393422, -0.18855869473039874), 90: (-0.14142135623730964, -0.1414213562373094), 99: (-0.34155251680845944, -0.20818712318922863), 83: (-0.5123287752126892, -0.31228068478384297), 15: (-0.3312597114845485, -0.22420304089635734), 45: (-0.32021649636974436, -0.23971106660453856), 86: (-0.30844788789815525, -0.25467606964763506), 17: (-0.29598054575315375, -0.26906414948050084), 91: (-0.2828427124746192, -0.28284271247461884), 49: (-0.2690641494805012, -0.2959805457531534), 3: (-0.2546760696476355, -0.3084478878981549), 93: (-0.23971106660453892, -0.32021649636974403), 14: (-0.35956659990680845, -0.4803247445546161), 21: (-0.22420304089635776, -0.33125971148454825), 85: (-0.20818712318922908, -0.34155251680845916), 46: (-0.05176380902050436, -0.1931851652578136), 5: (-0.18159619989581907, -0.356402609675347), 58: (-0.14334717981812048, -0.37343217059888056), 73: (-0.10352761804100873, -0.3863703305156272), 13: (-0.0625737860160928, -0.395075336238055), 101: (-0.020934382497178033, -0.39945181390182954),  23: (0.10352761804100784, -0.38637033051562747), 84: (0.15529142706151178, -0.5795554957734412), 72: (0.1414213562373093, -0.14142135623730973), 39: (0.2178556140060104, -0.33546822717816993), 6: (0.2517281564199346, -0.31085838458278864), 4: (0.28284271247461873, -0.2828427124746193), 92: (0.31085838458278814, -0.25172815641993523), 48: (0.3354682271781695, -0.21785561400601106), 77: (0.1931851652578136, -0.05176380902050446), 22: (0.35152684506478576, -0.1908635041038441), 9: (0.3610341137399439, -0.17220443872331884), 40: (0.36955181300451434, -0.15307337294603676), 61: (0.37705659643687106, -0.1335227436935093), 98: (0.38352789394727693, -0.11360613788157006), 34: (0.3889479681590704, -0.09337814554236325), 47: (0.3933019630255816, -0.07289421019686014), 89: (0.39657794454952405, -0.052210476888021856), 100: (0.3987669334932511, -0.031383638291139264), 79: (0.3998629299902229, -0.010470779323150612)}
key_list=list(node_pos.keys())
val_list=list(node_pos.values())
key_list2=map(mapping4.get, key_list)

node_pos2 = dict(zip(key_list2, val_list))

#Nicola's coordinates:
##node_pos2 ={8: (-0.6103341221810272, 51.66357707275029), 9: (-1.569998022894939, 51.67300310760637), 10: (-0.8546928126034008, 51.18227968380197), 11: (0.2267831492812165, 50.85882989574213), 12: (-0.8638565144459807, 51.03470915691057), 13: (-2.350994657751996, 51.14361101205528), 14: (-1.351727278460583, 51.75447190508994), 15: (-1.352266097529122, 51.09977035712548), 16: (0.253517466356846, 51.73062350904629), 19: (-1.455090203096292, 52.25277748428343), 20: (-1.521222868831301, 52.25016592233181), 21: (-0.4315696172981158, 51.97899486480952), 22: (-2.174056810186911, 51.86536067192244), 23: (-0.4568654793880849, 51.6172916514639), 24: (0.03305791861330887, 51.91084285135771), 25: (-0.717051130066757, 52.12700415900683), 26: (-0.02437969064872414, 52.6743951997187), 29: (-1.794919941704354, 52.1180554802886), 30: (-2.795905760500399, 52.32705294181718), 31: (0.4660306329270809, 52.48657614447592), 32: (-0.2643861474972291, 52.46762462896469), 33: (0.3100498771136775, 52.62731102212678), 34: (0.5133521475757217, 52.78204015460705), 35: (-1.873990071196755, 52.35408989685023), 36: (-1.027826679350998, 52.51437783028678), 37: (-0.8922915111225214, 52.54330291390943), 38: (-0.8333772044374186, 52.32090760981825), 39: (-0.8297073211373331, 52.67972683158131), 40: (-1.931905820468694, 52.37425044437181), 41: (0.1884148965373171, 52.70612607774014), 42: (-0.2216919496346166, 52.42573993833295), 43: (-2.037386497690027, 52.2211584706631), 44: (-0.8061343613285903, 52.18322537813458), 45: (-2.174307021512559, 52.45334808506411), 46: (-1.543530065574153, 53.458995982997), 47: (-1.53184555973933, 53.44474161559958), 48: (-0.7707313251779839, 53.17022127620448), 49: (-1.901668314217822, 53.20357454825176), 50: (-0.9820326362980218, 53.23447655883814), 52: (-1.15162989844091, 53.85485973996103), 53: (-2.442096338332046, 53.67506801980726), 54: (-2.039200629036867, 53.87032485869153), 55: (-1.94978816474612, 53.80669947778121), 56: (-1.89362065747116, 53.66324461332241), 57: (-0.4180084926398373, 53.59974253579597), 58: (-2.92274633408258, 54.37823944839375), 59: (-2.970531686751949, 54.72155147488888), 60: (-2.492025341098075, 54.24730258529586), 61: (-2.954683473570868, 55.43038819980884), 62: (-2.115903509468683, 54.71059511230858), 63: (-2.259290591561752, 55.5367774724587), 64: (-2.99027443547176, 55.34625765333664), 65: (-2.398941089949332, 54.46049261644818), 66: (-2.445331927161237, 55.46631869020585), 67: (-2.628785850126941, 54.8844725999985), 69: (-3.901833211437872, 56.20297176367637), 70: (-3.712353391353975, 57.12832775034813), 71: (-3.08033363843133, 57.16538904011902), 72: (-5.079276547882721, 56.77882413004695), 73: (-4.406905985373358, 56.90129194230744), 74: (-4.245117582478362, 56.06452732816035), 75: (-3.923882573786074, 57.21884249867792), 76: (-4.047054983709651, 56.11721506908064), 77: (-4.202438675570115, 57.51393885660306), 81: (-7.185868442125052, 54.77979428618305), 82: (-6.203521789197097, 54.86255181038931), 83: (-6.662843597055552, 54.89303826186427), 84: (-7.146942780804326, 54.66365162538374), 85: (-6.801774648710539, 54.92419929803441), 86: (-6.87787773653325, 54.90272623364063), 87: (-7.158482569148989, 54.50530361791937), 88: (-7.092705866684031, 54.76942211797283), 89: (-6.250926824884131, 54.76485452203331), 0: (-0.3714882468167141, 51.67688075174104), 1: (-0.7133451333955394, 52.01898922753612), 17: (-2.16322794898876, 51.28714980150118), 18: (-3.585581344032742, 50.73572960408463), 2: (-1.218051176798242, 52.57534362970464), 27: (-2.768875201072003, 52.55709879678759), 28: (-3.787463761393823, 52.92245074805254), 3: (-1.282286491413132, 52.93633276173477), 4: (-1.442874777950362, 53.3874757444697), 51: (-2.681698702666089, 53.78512190386922), 5: (-1.424521830917538, 53.75800514605972), 6: (-2.686286939424296, 54.90827672923838), 68: (-4.282993331280121, 54.97172578152496), 7: (-3.507581319143225, 56.44479596995644), 78: (-5.29240541808551, 56.20820566100282), 79: (-4.851934689297694, 57.9532717279093), 80: (-2.300875051734938, 57.42353875645693), 90: (-6.154993928628484, 54.48136017254021), 91: (-7.402994326860625, 54.53996172644172)}
# this one
# node_pos2 ={9: (-0.6103341221810272, 51.66357707275029), 10: (-1.569998022894939, 51.67300310760637), 11: (-0.8546928126034008, 51.18227968380197), 12: (0.2267831492812165, 50.85882989574213), 13: (-0.8638565144459807, 51.03470915691057), 14: (-2.350994657751996, 51.14361101205528), 15: (-1.351727278460583, 51.75447190508994), 16: (-1.352266097529122, 51.09977035712548), 17: (0.253517466356846, 51.73062350904629), 20: (-1.455090203096292, 52.25277748428343), 21: (-1.521222868831301, 52.25016592233181), 22: (-0.4315696172981158, 51.97899486480952), 23: (-2.174056810186911, 51.86536067192244), 24: (-0.4568654793880849, 51.6172916514639), 25: (0.03305791861330887, 51.91084285135771), 26: (-0.717051130066757, 52.12700415900683), 27: (-0.02437969064872414, 52.6743951997187), 30: (-1.794919941704354, 52.1180554802886), 31: (-2.795905760500399, 52.32705294181718), 32: (0.4660306329270809, 52.48657614447592), 33: (-0.2643861474972291, 52.46762462896469), 34: (0.3100498771136775, 52.62731102212678), 35: (0.5133521475757217, 52.78204015460705), 36: (-1.873990071196755, 52.35408989685023), 37: (-1.027826679350998, 52.51437783028678), 38: (-0.8922915111225214, 52.54330291390943), 39: (-0.8333772044374186, 52.32090760981825), 40: (-0.8297073211373331, 52.67972683158131), 41: (-1.931905820468694, 52.37425044437181), 42: (0.1884148965373171, 52.70612607774014), 43: (-0.2216919496346166, 52.42573993833295), 44: (-2.037386497690027, 52.2211584706631), 45: (-0.8061343613285903, 52.18322537813458), 46: (-2.174307021512559, 52.45334808506411), 47: (-1.543530065574153, 53.458995982997), 48: (-1.53184555973933, 53.44474161559958), 49: (-0.7707313251779839, 53.17022127620448), 50: (-1.901668314217822, 53.20357454825176), 51: (-0.9820326362980218, 53.23447655883814), 53: (-1.15162989844091, 53.85485973996103), 54: (-2.442096338332046, 53.67506801980726), 55: (-2.039200629036867, 53.87032485869153), 56: (-1.94978816474612, 53.80669947778121), 57: (-1.89362065747116, 53.66324461332241), 58: (-0.4180084926398373, 53.59974253579597), 59: (-2.92274633408258, 54.37823944839375), 60: (-2.970531686751949, 54.72155147488888), 61: (-2.492025341098075, 54.24730258529586), 62: (-2.954683473570868, 55.43038819980884), 63: (-2.115903509468683, 54.71059511230858), 64: (-2.259290591561752, 55.5367774724587), 65: (-2.99027443547176, 55.34625765333664), 66: (-2.398941089949332, 54.46049261644818), 67: (-2.445331927161237, 55.46631869020585), 68: (-2.628785850126941, 54.8844725999985), 70: (-3.901833211437872, 56.20297176367637), 71: (-3.712353391353975, 57.12832775034813), 72: (-3.08033363843133, 57.16538904011902), 73: (-5.079276547882721, 56.77882413004695), 74: (-4.406905985373358, 56.90129194230744), 75: (-4.245117582478362, 56.06452732816035), 76: (-3.923882573786074, 57.21884249867792), 77: (-4.047054983709651, 56.11721506908064), 78: (-4.202438675570115, 57.51393885660306), 82: (-7.185868442125052, 54.77979428618305), 83: (-6.203521789197097, 54.86255181038931), 84: (-6.662843597055552, 54.89303826186427), 85: (-7.146942780804326, 54.66365162538374), 86: (-6.801774648710539, 54.92419929803441), 87: (-6.87787773653325, 54.90272623364063), 88: (-7.158482569148989, 54.50530361791937), 89: (-7.092705866684031, 54.76942211797283), 8: (-6.250926824884131, 54.76485452203331), 0: (-0.3714882468167141, 51.67688075174104), 1: (-0.7133451333955394, 52.01898922753612), 18: (-2.16322794898876, 51.28714980150118), 19: (-3.585581344032742, 50.73572960408463), 2: (-1.218051176798242, 52.57534362970464), 28: (-2.768875201072003, 52.55709879678759), 29: (-3.787463761393823, 52.92245074805254), 3: (-1.282286491413132, 52.93633276173477), 4: (-1.442874777950362, 53.3874757444697), 52: (-2.681698702666089, 53.78512190386922), 5: (-1.424521830917538, 53.75800514605972), 6: (-2.686286939424296, 54.90827672923838), 69: (-4.282993331280121, 54.97172578152496), 7: (-3.507581319143225, 56.44479596995644), 79: (-5.29240541808551, 56.20820566100282), 80: (-4.851934689297694, 57.9532717279093), 81: (-2.300875051734938, 57.42353875645693), 90: (-6.154993928628484, 54.48136017254021), 91: (-7.402994326860625, 54.53996172644172)}
ordered_nod_pos2 = dict(collections.OrderedDict(sorted(node_pos2.items())))
#print(ordered_nod_pos2)
#for key in node_pos2.keys() :
 #   print(key , " : " , node_pos2[key])

nodeslist=sorted(G1.nodes())
A = nx.adjacency_matrix(G1,nodeslist)
B=A.toarray()
#print(B[2,38])
#print(nodeslist)
nx.draw_networkx(G1, pos=node_pos2,node_size = 50, node_color = node_color2, with_labels = True)


#nx.draw_networkx_labels(G1,node_pos,labels,font_size=16,font_color='black')
f1.savefig("BT_backbone_G1.pdf", bbox_inches='tight')

np.savetxt("adj_matrix_metro_access_network.csv", B, delimiter=",")








